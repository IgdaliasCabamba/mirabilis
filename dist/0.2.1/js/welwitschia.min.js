const checkboxCardChangeEvent=new Event('wOnChange');function emitCheckEvents(element){element.inputElement.dispatchEvent(checkboxCardChangeEvent);element.mainElement.dispatchEvent(checkboxCardChangeEvent);};function checkBoxCard(element){element.inputElement.checked=true;element.mainElement.setAttribute("checked",true);emitCheckEvents(element);};function uncheckBoxCard(element){element.inputElement.checked=false;element.mainElement.setAttribute("checked",false);emitCheckEvents(element);};function handleCheckCardState(element){if(element.inputElement.checked){uncheckBoxCard(element);}
else{checkBoxCard(element);};};function listenCheckEvents(cards){cards.forEach(function listening(card){const element=card;card.inputElement.addEventListener('change',()=>{handleCheckCardState(element);});card.mainElement.addEventListener('click',()=>{handleCheckCardState(element);});});};function initCheckableCard(card){card.inputElement.checked?checkBoxCard(card):uncheckBoxCard(card)};function bindCheckableCards(){let cards=document.querySelectorAll('[MCheckableCard][w-type="checkbox"]');let checkableCards=[];Array.from(cards).forEach(function(element){if(element.querySelector("[w-binder]")===null){return;};const card={mainElement:element,inputElement:element.querySelector("[w-binder]"),};checkableCards.push(card);initCheckableCard(card);});listenCheckEvents(checkableCards);};bindCheckableCards();const radioCardChangeEvent=new Event('wOnChange');function emitRadioEvents(element){element.mainElement.dispatchEvent(radioCardChangeEvent);element.inputElement.dispatchEvent(radioCardChangeEvent);};function checkRadioCard(element){element.inputElement.checked=true;element.mainElement.setAttribute("checked",true);emitRadioEvents(element);};function uncheckRadioCard(element){element.inputElement.checked=false;element.mainElement.setAttribute("checked",false);emitRadioEvents(element);};function uncheckRadioGroup(element){let radio_cards=document.querySelectorAll('[MCheckableCard][w-type="radio"]');let radioName=element.mainElement.querySelector("[w-binder]").getAttribute("name");Array.from(radio_cards).forEach(function(radio_card){if(radio_card.querySelector(`input[name="${radioName}"]`)==null){return;}
radio_card.setAttribute("checked",false);});};function handleRadioCardState(element){uncheckRadioGroup(element);checkRadioCard(element);};function listenRadioEvents(cards){cards.forEach(function listening(card){const element=card;card.inputElement.addEventListener('change',()=>{handleRadioCardState(element);});card.mainElement.addEventListener('click',()=>{handleRadioCardState(element);});});};function initRadioCard(card){card.inputElement.checked?checkRadioCard(card):uncheckRadioCard(card);};function bindRadioCards(){let cards=document.querySelectorAll('[MCheckableCard][w-type="radio"]');let checkableCards=[];Array.from(cards).forEach(function(element){if(element.querySelector("[w-binder]")===null||element.querySelector("[w-binder]")===null){return;};const card={mainElement:element,inputElement:element.querySelector("[w-binder]"),};checkableCards.push(card);initRadioCard(card);});listenRadioEvents(checkableCards);};bindRadioCards();class WMPreviewXScrollable{constructor(elementQuery,enabled=true){this.pos={top:0,left:0,x:0,y:0};this.elementQuery=elementQuery;this.isEnabled=enabled;this.canDrag=false;this.main();};get touch(){return document.querySelector(`${this.elementQuery} [MTouchArea]`);};get widget(){return document.querySelector(this.elementQuery);};get enabled(){return this.isEnabled;};enable(){this.isEnabled=true;};disable(){this.isEnabled=false;};main(){this.touch.addEventListener("dragstart",(event)=>{if(this.isEnabled){this.canDrag=true;this.dragHandler(event);};});this.touch.addEventListener("dragend",(event)=>{if(this.isEnabled){this.draggingHandler(event);this.canDrag=false;this.dropHandler(event);};});document.addEventListener('drag',(event)=>{if(this.isEnabled){this.draggingHandler(event);};});};dragHandler(event){const element=this.widget;element.style.cursor='grabbing';element.style.userSelect='none';this.pos={left:element.scrollLeft,top:element.scrollTop,x:event.clientX,y:event.clientY,};};draggingHandler(event){if(!this.canDrag){return;};const element=this.widget;const dx=event.clientX-this.pos.x;const dy=event.clientY-this.pos.y;element.scrollTop=this.pos.top-dy;element.scrollLeft=this.pos.left-dx;};dropHandler(event){const element=this.widget;element.style.cursor='grab';element.style.removeProperty('user-select');};};